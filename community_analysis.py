import matplotlib.pyplot as plt
import numpy as np
import community
import networkx as nx
from clustering_louvain import construct_graph, rescale
import community_layout

# G_nx = nx.Graph()
node_list = []
investor_list = []
node_size_list = []
weights_dict = {}
transactions_startup2vc = {}

G_nx = construct_graph("investor", graph="data/investor_network_undirected_unweighted.txt", is_weighted=True, weight_method="jaccard")

# print(G_nx.number_of_nodes())
# communities_uw = {0: [0, 7, 9, 17, 35, 45, 47, 57, 64, 67, 69, 78, 82, 97, 105, 130, 131, 135, 148, 149, 169, 181, 189, 195, 208, 224, 241, 242, 251, 261, 278, 286, 320, 328, 345, 373, 384, 393, 396, 427, 433, 449, 452, 469, 477, 483, 489, 491, 495, 502], 1: [1, 2, 40, 71, 90, 92, 119, 124, 133, 139, 144, 155, 158, 161, 184, 186, 197, 211, 220, 252, 276, 283, 294, 309, 358, 359, 376, 386, 387, 391, 397, 419, 428, 432, 443, 466, 470, 479, 481, 503], 2: [3, 13, 20, 22, 43, 54, 56, 59, 70, 73, 74, 77, 79, 85, 93, 102, 104, 107, 126, 134, 137, 150, 154, 162, 166, 167, 170, 172, 187, 192, 201, 204, 207, 212, 213, 216, 225, 231, 232, 248, 273, 291, 301, 312, 317, 325, 327, 331, 335, 338, 348, 367, 368, 381, 382, 390, 399, 402, 404, 407, 410, 415, 422, 426, 431, 440, 444, 448, 485, 500], 3: [4, 36, 44, 51, 65, 66, 75, 83, 84, 86, 87, 88, 96, 98, 111, 116, 122, 153, 190, 193, 194, 209, 210, 235, 257, 277, 279, 282, 288, 305, 314, 318, 329, 332, 336, 349, 378, 379, 398, 400, 403, 411, 412, 416, 442, 450, 453, 472, 476, 482, 486, 506], 4: [5, 38, 48, 91, 99, 106, 157, 171, 174, 175, 188, 196, 198, 205, 218, 222, 240, 250, 259, 275, 284, 296, 297, 330, 342, 362, 370, 424, 451, 455, 475, 478, 488, 509], 5: [6, 10, 11, 14, 23, 26, 30, 31, 32, 39, 41, 42, 46, 52, 61, 63, 80, 95, 101, 103, 109, 113, 120, 121, 129, 141, 143, 159, 173, 185, 191, 203, 223, 227, 233, 234, 238, 249, 253, 263, 267, 269, 272, 285, 290, 293, 295, 347, 351, 352, 353, 356, 357, 377, 380, 395, 417, 425, 438], 6: [8, 12, 15, 16, 18, 19, 24, 27, 28, 33, 37, 81, 89, 94, 100, 108, 115, 118, 123, 125, 128, 132, 140, 151, 164, 200, 206, 215, 221, 228, 229, 239, 258, 264, 271, 280, 302, 313, 322, 339, 350, 355, 361, 365, 388, 394, 405, 420, 439, 454, 461, 464, 467, 473, 480], 7: [21, 29, 49, 53, 58, 68, 112, 163, 178, 219, 243, 247, 255, 262, 292, 299, 300, 303, 315, 323, 326, 372, 385, 401, 406, 413, 414, 436, 490, 498], 8: [25, 34, 50, 55, 60, 62, 72, 76, 114, 117, 127, 136, 138, 142, 145, 146, 147, 152, 156, 160, 165, 168, 176, 177, 179, 180, 182, 214, 236, 254, 260, 268, 274, 287, 304, 307, 316, 333, 340, 341, 343, 344, 435, 446, 463, 484, 487, 494, 505]}
#
# # ('Communities', {0: [0, 2, 15, 17, 23, 44, 49, 53, 57, 58, 63, 70, 72, 73, 82, 88, 97, 108, 123, 124, 127, 140, 144, 148, 175, 188, 190, 191, 200, 211, 224, 229, 242, 251, 255, 257, 258, 262, 273, 299, 318, 320, 353, 377, 378, 397, 402, 403, 412, 417, 419, 452, 463, 469, 472, 489], 1: [1, 4, 5, 8, 12, 16, 18, 19, 24, 26, 27, 32, 52, 78, 81, 89, 90, 94, 99, 106, 111, 118, 120, 125, 128, 133, 149, 150, 151, 154, 157, 161, 164, 169, 174, 205, 215, 228, 239, 240, 249, 253, 254, 261, 263, 264, 278, 280, 282, 284, 286, 290, 293, 297, 302, 309, 330, 339, 342, 350, 379, 380, 386, 388, 393, 405, 416, 420, 424, 431, 432, 439, 442, 454, 455, 478, 482, 485, 503], 2: [3, 13, 20, 22, 31, 33, 41, 43, 54, 56, 59, 74, 77, 79, 85, 93, 102, 103, 104, 107, 113, 114, 126, 129, 134, 137, 138, 142, 146, 162, 165, 166, 167, 173, 182, 185, 187, 192, 201, 206, 207, 212, 213, 216, 223, 225, 227, 231, 232, 248, 267, 268, 271, 312, 325, 327, 331, 333, 335, 336, 338, 348, 355, 367, 368, 381, 390, 399, 404, 415, 426, 438, 440, 444, 464, 466, 484, 500], 3: [6, 7, 9, 28, 34, 35, 40, 45, 47, 50, 55, 60, 62, 64, 67, 68, 71, 76, 92, 98, 100, 105, 115, 117, 119, 130, 131, 132, 135, 136, 139, 145, 152, 155, 156, 160, 163, 168, 170, 171, 176, 180, 181, 184, 186, 189, 197, 198, 208, 220, 221, 236, 241, 243, 250, 252, 260, 276, 283, 287, 294, 307, 322, 326, 340, 343, 344, 345, 358, 359, 362, 373, 382, 384, 387, 391, 407, 410, 422, 428, 433, 435, 446, 449, 467, 470, 473, 477, 479, 481, 483, 487, 488, 491, 494, 498, 502, 505], 4: [10, 14, 21, 37, 39, 42, 66, 83, 109, 112, 143, 159, 177, 179, 210, 214, 233, 238, 247, 279, 292, 295, 303, 313, 314, 315, 316, 347, 352, 356, 357, 361, 365, 372, 394, 395, 401, 406, 413, 414, 425, 436, 461, 480, 495], 5: [11, 25, 29, 30, 61, 95, 101, 121, 147, 158, 195, 203, 218, 234, 235, 269, 272, 275, 285, 317, 328, 341, 351, 376, 396, 427, 443, 448], 6: [36, 38, 46, 48, 51, 65, 69, 75, 80, 84, 86, 87, 91, 122, 141, 153, 178, 193, 196, 209, 222, 259, 274, 277, 288, 296, 304, 329, 332, 370, 398, 400, 411, 451, 453, 475, 486, 490, 509], 7: [96, 116, 194, 219, 300, 305, 323, 349, 385, 450, 476, 506], 8: [172, 204, 291, 301]})
# # ('Community size', [98, 98, 79, 79, 78, 78, 56, 56, 45, 45, 39, 39, 28, 28, 12, 12, 4, 4])
#
# communities_cn = {0: [0, 2, 15, 17, 23, 44, 49, 53, 57, 58, 63, 70, 72, 73, 82, 88, 97, 108, 123, 124, 127, 140, 144, 148, 175, 188, 190, 191, 200, 211, 224, 229, 242, 251, 255, 257, 258, 262, 273, 299, 318, 320, 353, 377, 378, 397, 402, 403, 412, 417, 419, 452, 463, 469, 472, 489], 1: [1, 4, 5, 8, 12, 16, 18, 19, 24, 26, 27, 32, 52, 78, 81, 89, 90, 94, 99, 106, 111, 118, 120, 125, 128, 133, 149, 150, 151, 154, 157, 161, 164, 169, 174, 205, 215, 228, 239, 240, 249, 253, 254, 261, 263, 264, 278, 280, 282, 284, 286, 290, 293, 297, 302, 309, 330, 339, 342, 350, 379, 380, 386, 388, 393, 405, 416, 420, 424, 431, 432, 439, 442, 454, 455, 478, 482, 485, 503], 2: [3, 13, 20, 22, 31, 33, 41, 43, 54, 56, 59, 74, 77, 79, 85, 93, 102, 103, 104, 107, 113, 114, 126, 129, 134, 137, 138, 142, 146, 162, 165, 166, 167, 173, 182, 185, 187, 192, 201, 206, 207, 212, 213, 216, 223, 225, 227, 231, 232, 248, 267, 268, 271, 312, 325, 327, 331, 333, 335, 336, 338, 348, 355, 367, 368, 381, 390, 399, 404, 415, 426, 438, 440, 444, 464, 466, 484, 500], 3: [6, 7, 9, 28, 34, 35, 40, 45, 47, 50, 55, 60, 62, 64, 67, 68, 71, 76, 92, 98, 100, 105, 115, 117, 119, 130, 131, 132, 135, 136, 139, 145, 152, 155, 156, 160, 163, 168, 170, 171, 176, 180, 181, 184, 186, 189, 197, 198, 208, 220, 221, 236, 241, 243, 250, 252, 260, 276, 283, 287, 294, 307, 322, 326, 340, 343, 344, 345, 358, 359, 362, 373, 382, 384, 387, 391, 407, 410, 422, 428, 433, 435, 446, 449, 467, 470, 473, 477, 479, 481, 483, 487, 488, 491, 494, 498, 502, 505], 4: [10, 14, 21, 37, 39, 42, 66, 83, 109, 112, 143, 159, 177, 179, 210, 214, 233, 238, 247, 279, 292, 295, 303, 313, 314, 315, 316, 347, 352, 356, 357, 361, 365, 372, 394, 395, 401, 406, 413, 414, 425, 436, 461, 480, 495], 5: [11, 25, 29, 30, 61, 95, 101, 121, 147, 158, 195, 203, 218, 234, 235, 269, 272, 275, 285, 317, 328, 341, 351, 376, 396, 427, 443, 448], 6: [36, 38, 46, 48, 51, 65, 69, 75, 80, 84, 86, 87, 91, 122, 141, 153, 178, 193, 196, 209, 222, 259, 274, 277, 288, 296, 304, 329, 332, 370, 398, 400, 411, 451, 453, 475, 486, 490, 509], 7: [96, 116, 194, 219, 300, 305, 323, 349, 385, 450, 476, 506], 8: [172, 204, 291, 301]}
#
# for com1 in communities_uw:
#     overlap = 0
#     match_com2 = None
#     com1_set = set(communities_uw[com1])
#     for com2 in communities_cn:
#         com2_set = set(communities_cn[com2])
#         intersection = com1_set.intersection(com2_set)
#         if len(intersection) >= overlap:
#             overlap = len(intersection)
#             match_com2 = com2
#     print("uw %s vs cn %s" % (com1, match_com2))
#
#     intersection = com1_set.intersection(set(communities_cn[match_com2]))
#     print("%i overlap %s" % (len(intersection), intersection))
#     # for n in intersection:
#     #     print("%i : %s : %i" % (n, node_list[n], node_size_list[n]))
#
#     diff = com1_set - set(communities_cn[match_com2])
#     print("uw %s %s" % (len(diff), diff))
#     # for n in diff:
#     #     print("%i : %s : %i" % (n, node_list[n], node_size_list[n]))
#
#     diff = set(communities_cn[match_com2]) - com1_set
#     print("cn %s %s" % (len(diff), diff))
#     # for n in diff:
#     #     print("%i : %s : %i" % (n, node_list[n], node_size_list[n]))
#     print


# comm_size_list = [109, 52, 29, 29, 24, 22, 21, 21, 19, 19, 19, 17, 15, 13, 10, 7, 3, 2, 2, 2, 2, 2]
# plt.plot(np.arange(len(comm_size_list)), comm_size_list)
# # plt.yscale("log")
# plt.xlabel("Community")
# plt.ylabel("Number of nodes in community")
# plt.title("Community size distribution")
# plt.show()

# jaccard
# communities = {0: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 42, 44, 46, 47, 49, 52, 53, 58, 61, 63, 70, 77, 81, 95, 101, 124, 125, 128, 143, 185, 190, 196, 200, 203, 206, 228, 229, 238, 258, 262, 271, 273, 295, 299, 309, 313, 318, 320, 330, 331, 338, 350, 356, 373, 378, 379, 386, 388, 390, 393, 394, 397, 399, 402, 403, 406, 417, 419, 427, 432, 442, 444, 454, 461, 467, 469, 482, 489, 490, 500], 1: [7, 50, 64, 76, 136, 151, 168, 177, 179, 214, 241, 307, 340, 344, 372, 384, 491], 2: [13, 43, 62, 72, 98, 100, 109, 114, 138, 146, 176, 182, 233, 239, 268, 303, 304, 316, 333, 335, 357, 436, 487, 494], 3: [34, 55, 69, 131, 135, 141, 145, 147, 152, 166, 236, 274, 286, 287, 343, 410, 422, 449, 464, 483, 495, 498, 505], 4: [35, 38, 48, 91, 132, 133, 161, 197, 222, 227, 259, 278, 294, 296, 370, 391, 428, 438, 451, 470, 475, 479, 503, 509], 5: [36, 51, 65, 66, 73, 75, 78, 84, 86, 87, 88, 89, 94, 97, 108, 111, 115, 120, 122, 123, 153, 169, 181, 191, 193, 209, 215, 224, 253, 257, 261, 264, 277, 279, 282, 288, 290, 329, 332, 336, 380, 395, 398, 400, 401, 411, 416, 425, 453, 472, 473, 477, 486], 6: [40, 71, 92, 118, 119, 139, 155, 158, 184, 186, 220, 252, 276, 283, 302, 358, 359, 376, 387, 439, 443, 481], 7: [45, 59, 82, 112, 142, 195, 242, 247, 269, 292, 328, 367, 396, 407, 413, 414, 452], 8: [54, 57, 85, 93, 102, 107, 126, 134, 148, 167, 173, 187, 207, 212, 213, 223, 225, 267, 312, 317, 348, 351, 353, 377, 415, 440, 448], 9: [56, 67, 103, 104, 121, 150, 154, 159, 201, 231, 249, 263, 293, 325, 327, 347, 352, 368, 404, 431, 485], 10: [60, 79, 90, 105, 117, 127, 129, 140, 144, 156, 160, 163, 172, 180, 204, 211, 216, 235, 243, 254, 260, 280, 291, 301, 315, 326, 341, 435, 463], 11: [68, 83, 106, 149, 157, 174, 198, 210, 219, 240, 255, 300, 314, 323, 349, 385, 412, 424, 455], 12: [74, 80, 113, 130, 137, 162, 165, 170, 178, 189, 192, 208, 232, 234, 248, 272, 285, 345, 355, 381, 382, 426, 446, 466, 484], 13: [96, 116, 194, 305, 450, 476, 506], 14: [99, 171, 205, 218, 221, 250, 251, 275, 284, 322, 362, 478, 488], 15: [164, 339], 16: [175, 188], 17: [297, 342], 18: [361, 365, 480], 19: [405, 420], 20: [433, 502]}
# 7, ...
# communities = {0: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 42, 44, 46, 47, 49, 52, 53, 58, 61, 63, 70, 77, 81, 95, 101, 124, 125, 128, 143, 185, 190, 196, 200, 203, 206, 228, 229, 238, 258, 262, 271, 273, 295, 299, 309, 313, 318, 320, 330, 331, 338, 350, 356, 373, 378, 379, 386, 388, 390, 393, 394, 397, 399, 402, 403, 406, 417, 419, 427, 432, 442, 444, 454, 461, 467, 469, 482, 489, 490, 500], 1: [7, 50, 64, 76, 136, 151, 168, 177, 179, 214, 241, 307, 340, 344, 372, 384, 491], 2: [13, 43, 62, 72, 98, 100, 109, 114, 138, 146, 176, 182, 233, 239, 268, 303, 304, 316, 333, 335, 357, 436, 487, 494], 3: [34, 55, 69, 131, 135, 141, 145, 147, 152, 166, 236, 274, 286, 287, 343, 410, 422, 449, 464, 483, 495, 498, 505], 4: [35, 38, 48, 91, 132, 133, 161, 197, 222, 227, 259, 278, 294, 296, 370, 391, 428, 438, 451, 470, 475, 479, 503, 509], 5: [36, 51, 65, 66, 73, 75, 78, 84, 86, 87, 88, 89, 94, 97, 108, 111, 115, 120, 122, 123, 153, 169, 181, 191, 193, 209, 215, 224, 253, 257, 261, 264, 277, 279, 282, 288, 290, 329, 332, 336, 380, 395, 398, 400, 401, 411, 416, 425, 453, 472, 473, 477, 486], 6: [40, 71, 92, 118, 119, 139, 155, 158, 184, 186, 220, 252, 276, 283, 302, 358, 359, 376, 387, 439, 443, 481], 7: [45, 59, 82, 112, 142, 195, 242, 247, 269, 292, 328, 367, 396, 407, 413, 414, 452], 8: [54, 57, 85, 93, 102, 107, 126, 134, 148, 167, 173, 187, 207, 212, 213, 223, 225, 267, 312, 317, 348, 351, 353, 377, 415, 440, 448], 9: [56, 67, 103, 104, 121, 150, 154, 159, 201, 231, 249, 263, 293, 325, 327, 347, 352, 368, 404, 431, 485], 10: [60, 79, 90, 105, 117, 127, 129, 140, 144, 156, 160, 163, 172, 180, 204, 211, 216, 235, 243, 254, 260, 280, 291, 301, 315, 326, 341, 435, 463], 11: [68, 83, 106, 149, 157, 174, 198, 210, 219, 240, 255, 300, 314, 323, 349, 385, 412, 424, 455], 12: [74, 80, 113, 130, 137, 162, 165, 170, 178, 189, 192, 208, 232, 234, 248, 272, 285, 345, 355, 381, 382, 426, 446, 466, 484], 13: [96, 116, 194, 305, 450, 476, 506], 14: [99, 171, 205, 218, 221, 250, 251, 275, 284, 322, 362, 478, 488], 15: [164, 339, 175, 188, 297, 342, 361, 365, 480, 405, 420, 433, 502]}
# 13, ...
# communities = {0: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 42, 44, 46, 47, 49, 52, 53, 58, 61, 63, 70, 77, 81, 95, 101, 124, 125, 128, 143, 185, 190, 196, 200, 203, 206, 228, 229, 238, 258, 262, 271, 273, 295, 299, 309, 313, 318, 320, 330, 331, 338, 350, 356, 373, 378, 379, 386, 388, 390, 393, 394, 397, 399, 402, 403, 406, 417, 419, 427, 432, 442, 444, 454, 461, 467, 469, 482, 489, 490, 500], 1: [7, 50, 64, 76, 136, 151, 168, 177, 179, 214, 241, 307, 340, 344, 372, 384, 491], 2: [13, 43, 62, 72, 98, 100, 109, 114, 138, 146, 176, 182, 233, 239, 268, 303, 304, 316, 333, 335, 357, 436, 487, 494], 3: [34, 55, 69, 131, 135, 141, 145, 147, 152, 166, 236, 274, 286, 287, 343, 410, 422, 449, 464, 483, 495, 498, 505], 4: [35, 38, 48, 91, 132, 133, 161, 197, 222, 227, 259, 278, 294, 296, 370, 391, 428, 438, 451, 470, 475, 479, 503, 509], 5: [36, 51, 65, 66, 73, 75, 78, 84, 86, 87, 88, 89, 94, 97, 108, 111, 115, 120, 122, 123, 153, 169, 181, 191, 193, 209, 215, 224, 253, 257, 261, 264, 277, 279, 282, 288, 290, 329, 332, 336, 380, 395, 398, 400, 401, 411, 416, 425, 453, 472, 473, 477, 486], 6: [40, 71, 92, 118, 119, 139, 155, 158, 184, 186, 220, 252, 276, 283, 302, 358, 359, 376, 387, 439, 443, 481], 7: [45, 59, 82, 112, 142, 195, 242, 247, 269, 292, 328, 367, 396, 407, 413, 414, 452], 8: [54, 57, 85, 93, 102, 107, 126, 134, 148, 167, 173, 187, 207, 212, 213, 223, 225, 267, 312, 317, 348, 351, 353, 377, 415, 440, 448], 9: [56, 67, 103, 104, 121, 150, 154, 159, 201, 231, 249, 263, 293, 325, 327, 347, 352, 368, 404, 431, 485], 10: [60, 79, 90, 105, 117, 127, 129, 140, 144, 156, 160, 163, 172, 180, 204, 211, 216, 235, 243, 254, 260, 280, 291, 301, 315, 326, 341, 435, 463], 11: [68, 83, 106, 149, 157, 174, 198, 210, 219, 240, 255, 300, 314, 323, 349, 385, 412, 424, 455], 12: [74, 80, 113, 130, 137, 162, 165, 170, 178, 189, 192, 208, 232, 234, 248, 272, 285, 345, 355, 381, 382, 426, 446, 466, 484], 13: [96, 116, 194, 305, 450, 476, 506, 164, 339, 175, 188, 297, 342, 361, 365, 480, 405, 420, 433, 502], 14: [99, 171, 205, 218, 221, 250, 251, 275, 284, 322, 362, 478, 488]}
# 17, 17, ...
# communities = {0: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 42, 44, 46, 47, 49, 52, 53, 58, 61, 63, 70, 77, 81, 95, 101, 124, 125, 128, 143, 185, 190, 196, 200, 203, 206, 228, 229, 238, 258, 262, 271, 273, 295, 299, 309, 313, 318, 320, 330, 331, 338, 350, 356, 373, 378, 379, 386, 388, 390, 393, 394, 397, 399, 402, 403, 406, 417, 419, 427, 432, 442, 444, 454, 461, 467, 469, 482, 489, 490, 500], 1: [7, 50, 64, 76, 136, 151, 168, 177, 179, 214, 241, 307, 340, 344, 372, 384, 491], 2: [13, 43, 62, 72, 98, 100, 109, 114, 138, 146, 176, 182, 233, 239, 268, 303, 304, 316, 333, 335, 357, 436, 487, 494], 3: [34, 55, 69, 131, 135, 141, 145, 147, 152, 166, 236, 274, 286, 287, 343, 410, 422, 449, 464, 483, 495, 498, 505], 4: [35, 38, 48, 91, 132, 133, 161, 197, 222, 227, 259, 278, 294, 296, 370, 391, 428, 438, 451, 470, 475, 479, 503, 509], 5: [36, 51, 65, 66, 73, 75, 78, 84, 86, 87, 88, 89, 94, 97, 108, 111, 115, 120, 122, 123, 153, 169, 181, 191, 193, 209, 215, 224, 253, 257, 261, 264, 277, 279, 282, 288, 290, 329, 332, 336, 380, 395, 398, 400, 401, 411, 416, 425, 453, 472, 473, 477, 486], 6: [40, 71, 92, 118, 119, 139, 155, 158, 184, 186, 220, 252, 276, 283, 302, 358, 359, 376, 387, 439, 443, 481], 7: [45, 59, 82, 112, 142, 195, 242, 247, 269, 292, 328, 367, 396, 407, 413, 414, 452], 8: [54, 57, 85, 93, 102, 107, 126, 134, 148, 167, 173, 187, 207, 212, 213, 223, 225, 267, 312, 317, 348, 351, 353, 377, 415, 440, 448], 9: [56, 67, 103, 104, 121, 150, 154, 159, 201, 231, 249, 263, 293, 325, 327, 347, 352, 368, 404, 431, 485], 10: [60, 79, 90, 105, 117, 127, 129, 140, 144, 156, 160, 163, 172, 180, 204, 211, 216, 235, 243, 254, 260, 280, 291, 301, 315, 326, 341, 435, 463], 11: [68, 83, 106, 149, 157, 174, 198, 210, 219, 240, 255, 300, 314, 323, 349, 385, 412, 424, 455], 12: [74, 80, 113, 130, 137, 162, 165, 170, 178, 189, 192, 208, 232, 234, 248, 272, 285, 345, 355, 381, 382, 426, 446, 466, 484], 13: [96, 116, 194, 305, 450, 476, 506, 164, 339, 175, 188, 297, 342, 361, 365, 480, 405, 420, 433, 502, 99, 171, 205, 218, 221, 250, 251, 275, 284, 322, 362, 478, 488]}

# unweighted
# communities = {0: [0, 7, 9, 17, 35, 45, 47, 57, 64, 67, 69, 78, 82, 97, 105, 130, 131, 135, 148, 149, 169, 181, 189, 195, 208, 224, 241, 242, 251, 261, 278, 286, 320, 328, 345, 373, 384, 393, 396, 427, 433, 449, 452, 469, 477, 483, 489, 491, 495, 502], 1: [1, 2, 40, 71, 90, 92, 119, 124, 133, 139, 144, 155, 158, 161, 184, 186, 197, 211, 220, 252, 276, 283, 294, 309, 358, 359, 376, 386, 387, 391, 397, 419, 428, 432, 443, 466, 470, 479, 481, 503], 2: [3, 13, 20, 22, 43, 54, 56, 59, 70, 73, 74, 77, 79, 85, 93, 102, 104, 107, 126, 134, 137, 150, 154, 162, 166, 167, 170, 172, 187, 192, 201, 204, 207, 212, 213, 216, 225, 231, 232, 248, 273, 291, 301, 312, 317, 325, 327, 331, 335, 338, 348, 367, 368, 381, 382, 390, 399, 402, 404, 407, 410, 415, 422, 426, 431, 440, 444, 448, 485, 500], 3: [4, 36, 44, 51, 65, 66, 75, 83, 84, 86, 87, 88, 96, 98, 111, 116, 122, 153, 190, 193, 194, 209, 210, 235, 257, 277, 279, 282, 288, 305, 314, 318, 329, 332, 336, 349, 378, 379, 398, 400, 403, 411, 412, 416, 442, 450, 453, 472, 476, 482, 486, 506], 4: [5, 38, 48, 91, 99, 106, 157, 171, 174, 175, 188, 196, 198, 205, 218, 222, 240, 250, 259, 275, 284, 296, 297, 330, 342, 362, 370, 424, 451, 455, 475, 478, 488, 509], 5: [6, 10, 11, 14, 23, 26, 30, 31, 32, 39, 41, 42, 46, 52, 61, 63, 80, 95, 101, 103, 109, 113, 120, 121, 129, 141, 143, 159, 173, 185, 191, 203, 223, 227, 233, 234, 238, 249, 253, 263, 267, 269, 272, 285, 290, 293, 295, 347, 351, 352, 353, 356, 357, 377, 380, 395, 417, 425, 438], 6: [8, 12, 15, 16, 18, 19, 24, 27, 28, 33, 37, 81, 89, 94, 100, 108, 115, 118, 123, 125, 128, 132, 140, 151, 164, 200, 206, 215, 221, 228, 229, 239, 258, 264, 271, 280, 302, 313, 322, 339, 350, 355, 361, 365, 388, 394, 405, 420, 439, 454, 461, 464, 467, 473, 480], 7: [21, 29, 49, 53, 58, 68, 112, 163, 178, 219, 243, 247, 255, 262, 292, 299, 300, 303, 315, 323, 326, 372, 385, 401, 406, 413, 414, 436, 490, 498], 8: [25, 34, 50, 55, 60, 62, 72, 76, 114, 117, 127, 136, 138, 142, 145, 146, 147, 152, 156, 160, 165, 168, 176, 177, 179, 180, 182, 214, 236, 254, 260, 268, 274, 287, 304, 307, 316, 333, 340, 341, 343, 344, 435, 446, 463, 484, 487, 494, 505]}

# com_size = []
# for c in communities:
#     com_size.append((c, len(communities[c])))
# com_size = sorted(com_size, key=lambda x: x[1], reverse=True)
# print(com_size)
#
# # recover partition
# partition = {}
# for c in communities:
#     nodes_c = communities[c]
#     for n in nodes_c:
#         partition[n] = c
#
# size = float(len(set(partition.values())))
# print("# community", size)
# # print(communities.keys())
# print("modularity", community.modularity(partition, G_nx))
# print
#
#
# last = len(communities)-1
# modularities = []
# for i in range(last, 0, -1):
#     # print(com_size[i])
#     print(com_size[i])
#     key1 = com_size[i][0]
#     key2 = com_size[i-1][0]
#     communities[key2].extend(communities[key1])
#     del communities[key1]
#     # print(communities.keys())
#
#     # recover partition
#     partition = {}
#     for c in communities:
#         nodes_c = communities[c]
#         for n in nodes_c:
#             partition[n] = c
#
#     size = float(len(set(partition.values())))
#     print("# community", size)
#     # print(communities.keys())
#     print("modularity", community.modularity(partition, G_nx))
#     modularities.append(community.modularity(partition, G_nx))
#     print
#
# print(modularities)
# # print(np.arange(last,0,-1))
# plt.plot(np.arange(last), modularities)
# plt.xticks(np.arange(last))
# # plt.yscale("log")
# plt.xlabel("Number of communities merged")
# plt.ylabel("Modularity")
# plt.axhline(y=0.2416, linestyle='--', color="red", label='Unweighted G_iu')
# plt.axhline(y=0.2126, linestyle='--', color="green", label='G_iu_cn')
# plt.title("G_iu_jc modularity change after merging communities")
# plt.legend()
# plt.show()


# plot Jaccard weight for each community
# communities = {0: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 42, 44, 46, 47, 49, 52, 53, 58, 61, 63, 70, 77, 81, 95, 101, 124, 125, 128, 143, 185, 190, 196, 200, 203, 206, 228, 229, 238, 258, 262, 271, 273, 295, 299, 309, 313, 318, 320, 330, 331, 338, 350, 356, 373, 378, 379, 386, 388, 390, 393, 394, 397, 399, 402, 403, 406, 417, 419, 427, 432, 442, 444, 454, 461, 467, 469, 482, 489, 490, 500], 1: [7, 50, 64, 76, 136, 151, 168, 177, 179, 214, 241, 307, 340, 344, 372, 384, 491], 2: [13, 43, 62, 72, 98, 100, 109, 114, 138, 146, 176, 182, 233, 239, 268, 303, 304, 316, 333, 335, 357, 436, 487, 494], 3: [34, 55, 69, 131, 135, 141, 145, 147, 152, 166, 236, 274, 286, 287, 343, 410, 422, 449, 464, 483, 495, 498, 505], 4: [35, 38, 48, 91, 132, 133, 161, 197, 222, 227, 259, 278, 294, 296, 370, 391, 428, 438, 451, 470, 475, 479, 503, 509], 5: [36, 51, 65, 66, 73, 75, 78, 84, 86, 87, 88, 89, 94, 97, 108, 111, 115, 120, 122, 123, 153, 169, 181, 191, 193, 209, 215, 224, 253, 257, 261, 264, 277, 279, 282, 288, 290, 329, 332, 336, 380, 395, 398, 400, 401, 411, 416, 425, 453, 472, 473, 477, 486], 6: [40, 71, 92, 118, 119, 139, 155, 158, 184, 186, 220, 252, 276, 283, 302, 358, 359, 376, 387, 439, 443, 481], 7: [45, 59, 82, 112, 142, 195, 242, 247, 269, 292, 328, 367, 396, 407, 413, 414, 452], 8: [54, 57, 85, 93, 102, 107, 126, 134, 148, 167, 173, 187, 207, 212, 213, 223, 225, 267, 312, 317, 348, 351, 353, 377, 415, 440, 448], 9: [56, 67, 103, 104, 121, 150, 154, 159, 201, 231, 249, 263, 293, 325, 327, 347, 352, 368, 404, 431, 485], 10: [60, 79, 90, 105, 117, 127, 129, 140, 144, 156, 160, 163, 172, 180, 204, 211, 216, 235, 243, 254, 260, 280, 291, 301, 315, 326, 341, 435, 463], 11: [68, 83, 106, 149, 157, 174, 198, 210, 219, 240, 255, 300, 314, 323, 349, 385, 412, 424, 455], 12: [74, 80, 113, 130, 137, 162, 165, 170, 178, 189, 192, 208, 232, 234, 248, 272, 285, 345, 355, 381, 382, 426, 446, 466, 484], 13: [96, 116, 194, 305, 450, 476, 506], 14: [99, 171, 205, 218, 221, 250, 251, 275, 284, 322, 362, 478, 488], 15: [164, 339], 16: [175, 188], 17: [297, 342], 18: [361, 365, 480], 19: [405, 420], 20: [433, 502]}
#
# community_weights = []
# for c in communities:
#     nodes = communities[c]
#     weights = []
#     for i in range(len(nodes)):
#         for j in range(i+1, len(nodes)):
#             edge = G_nx.get_edge_data(nodes[i], nodes[j])
#             if edge is not None:
#                 weights.append(edge["weight"])
#     community_weights.append((c, sorted(weights, reverse=True)))
#
# community_weights = sorted(community_weights, key=lambda x: len(x[1]), reverse=True)
# start = 0
# end = 0
# for c, weights in community_weights:
#     end = start + len(weights)
#     plt.plot(np.arange(start, end), weights, "-o", markersize=3)
#     m = np.mean(weights)
#     plt.plot(np.arange(start, end), [m for i in weights], linestyle='--')
#     start = end
# plt.yscale("log")
# # plt.MarkerSize = 0.1
# plt.title("Edge weights between nodes in different communities")
# plt.xlabel("Nodes")
# plt.ylabel("Edge weights")
# plt.show()

# f = open("data/investor_network_undirected_weights_jaccard.txt", "r")
# weights = []
# for line in f:
#     s, d, w = line.strip().split()
#     s = int(s)
#     d = int(d)
#     weights.append((s, d, float(w)))
#
# for i in sorted(weights):
#     print i

## louvain unweighted plot
communities = {0: [0, 7, 9, 17, 35, 45, 47, 57, 64, 67, 69, 78, 82, 97, 105, 130, 131, 135, 148, 149, 169, 181, 189, 195, 208, 224, 241, 242, 251, 261, 278, 286, 320, 328, 345, 373, 384, 393, 396, 427, 433, 449, 452, 469, 477, 483, 489, 491, 495, 502], 1: [1, 2, 40, 71, 90, 92, 119, 124, 133, 139, 144, 155, 158, 161, 184, 186, 197, 211, 220, 252, 276, 283, 294, 309, 358, 359, 376, 386, 387, 391, 397, 419, 428, 432, 443, 466, 470, 479, 481, 503], 2: [3, 13, 20, 22, 43, 54, 56, 59, 70, 73, 74, 77, 79, 85, 93, 102, 104, 107, 126, 134, 137, 150, 154, 162, 166, 167, 170, 172, 187, 192, 201, 204, 207, 212, 213, 216, 225, 231, 232, 248, 273, 291, 301, 312, 317, 325, 327, 331, 335, 338, 348, 367, 368, 381, 382, 390, 399, 402, 404, 407, 410, 415, 422, 426, 431, 440, 444, 448, 485, 500], 3: [4, 36, 44, 51, 65, 66, 75, 83, 84, 86, 87, 88, 96, 98, 111, 116, 122, 153, 190, 193, 194, 209, 210, 235, 257, 277, 279, 282, 288, 305, 314, 318, 329, 332, 336, 349, 378, 379, 398, 400, 403, 411, 412, 416, 442, 450, 453, 472, 476, 482, 486, 506], 4: [5, 38, 48, 91, 99, 106, 157, 171, 174, 175, 188, 196, 198, 205, 218, 222, 240, 250, 259, 275, 284, 296, 297, 330, 342, 362, 370, 424, 451, 455, 475, 478, 488, 509], 5: [6, 10, 11, 14, 23, 26, 30, 31, 32, 39, 41, 42, 46, 52, 61, 63, 80, 95, 101, 103, 109, 113, 120, 121, 129, 141, 143, 159, 173, 185, 191, 203, 223, 227, 233, 234, 238, 249, 253, 263, 267, 269, 272, 285, 290, 293, 295, 347, 351, 352, 353, 356, 357, 377, 380, 395, 417, 425, 438], 6: [8, 12, 15, 16, 18, 19, 24, 27, 28, 33, 37, 81, 89, 94, 100, 108, 115, 118, 123, 125, 128, 132, 140, 151, 164, 200, 206, 215, 221, 228, 229, 239, 258, 264, 271, 280, 302, 313, 322, 339, 350, 355, 361, 365, 388, 394, 405, 420, 439, 454, 461, 464, 467, 473, 480], 7: [21, 29, 49, 53, 58, 68, 112, 163, 178, 219, 243, 247, 255, 262, 292, 299, 300, 303, 315, 323, 326, 372, 385, 401, 406, 413, 414, 436, 490, 498], 8: [25, 34, 50, 55, 60, 62, 72, 76, 114, 117, 127, 136, 138, 142, 145, 146, 147, 152, 156, 160, 165, 168, 176, 177, 179, 180, 182, 214, 236, 254, 260, 268, 274, 287, 304, 307, 316, 333, 340, 341, 343, 344, 435, 446, 463, 484, 487, 494, 505]}
# recover partition
partition = {}
for c in communities:
    nodes_c = communities[c]
    for n in nodes_c:
        partition[n] = c
# draw graph
# pos = nx.spring_layout(G_nx)
pos = community_layout.community_layout(G_nx, partition)
# pos = community_layout._position_communities(G_nx, partition)

# nx.draw_networkx_nodes(G_nx, pos, list_nodes, node_size = 10, cmap=plt.cm.RdYlBu, node_color = np.array(partition.values())) #str(count / size)
nx.draw_networkx_nodes(G_nx, pos, node_size=rescale(node_size_list), node_color=list(partition.values()))
nx.draw_networkx_edges(G_nx, pos, alpha=0.1)
# nx.draw_spring(G_nx, cmap = plt.get_cmap('jet'), node_color = partition.values(), node_size=50, with_labels=False)
# nx.draw(G_nx, pos, node_size=100, node_color=partition.values())
plt.show()